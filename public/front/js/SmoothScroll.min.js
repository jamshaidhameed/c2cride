function SmoothScroll(target, speed, smooth) {
    if (target === document) {
        target = (document.scrollingElement 
                  || document.documentElement 
                  || document.body.parentNode 
                  || document.body); // Cross-browser support for document scrolling
    }

    let moving = false;
    let pos = target.scrollTop;
    let frame = target === document.body && document.documentElement 
                ? document.documentElement 
                : target; // Safari-specific adjustments

    target.addEventListener('mousewheel', scrolled, { passive: false });
    target.addEventListener('DOMMouseScroll', scrolled, { passive: false });

    // Method to update the scroll position
    this.scrollTo = function(targetPos) {
        pos = targetPos;
        update(); // Call update to smoothly scroll to the target position
    };

    function scrolled(e) {
        // Prevent default scrolling behavior in the body
        if (document.body.classList.contains('overflow_hidden') || document.documentElement.classList.contains('overflow_hidden')) {
            moving = false;
            e.stopPropagation();
            return;
        }

        // Determine if the target element or its ancestors are scrollable
        const scrollableElement = getScrollableElement(e.target);
        
        if (scrollableElement) {
            // Allow scrolling inside the scrollable element
            const delta = normalizeWheelDelta(e);
            scrollableElement.scrollTop += -delta * speed;
            e.preventDefault();
        } else {
            // Prevent default body scrolling and apply smooth scroll
            e.preventDefault();
            const delta = normalizeWheelDelta(e);
            pos += -delta * speed;
            pos = Math.max(0, Math.min(pos, target.scrollHeight - frame.clientHeight)); // Limit scrolling
            if (!moving) update(e);
        }
    }

    function getScrollableElement(element) {
        // Check if the element or any of its parents is scrollable
        while (element && element !== document.body) {
            const style = getComputedStyle(element);
            if (
                (style.overflowY === 'auto' || style.overflowY === 'scroll') &&
                element.scrollHeight > element.clientHeight
            ) {
                return element; // Return the scrollable element
            }
            element = element.parentNode;
        }
        return null; // No scrollable element found
    }

    function normalizeWheelDelta(e) {
        if (e.detail) {
            if (e.wheelDelta)
                return e.wheelDelta / e.detail / 40 * (e.detail > 0 ? 1 : -1); // Opera
            else
                return -e.detail / 3; // Firefox
        } else {
            return e.wheelDelta / 120; // IE, Safari, Chrome
        }
    }

    function update() {
        if (document.body.classList.contains('overflow_hidden') || document.documentElement.classList.contains('overflow_hidden')) {
            moving = false;
            return; // Stop scrolling if overflow is hidden
        }

        moving = true;
        const delta = (pos - target.scrollTop) / smooth;

        target.scrollTop += delta;

        if (Math.abs(delta) > 0.5) {
            requestFrame(update);
        } else {
            moving = false;
        }
    }

    const requestFrame = (function () { // requestAnimationFrame cross-browser
        return (
            window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function (func) {
                window.setTimeout(func, 1000 / 50);
            }
        );
    })();
}
